{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Number","n","isEliminated","isAGuess","isFoundAnswer","rest","style","display","width","height","color","fontSize","cursor","range","_","needle","sample","App","React","useState","knownMin","setKnownMin","max","knownMax","setKnownMax","nextSuggestion","Math","trunc","reduce","acc","push","numbers","setNumbers","maxWidth","margin","ceil","log2","length","flexWrap","map","num","key","onClick","textAlign","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0wBAGA,IAAMA,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,aAAcC,EAApB,EAAoBA,SAAUC,EAA9B,EAA8BA,cAAkBC,EAAhD,sEACX,wCAAMC,MAAO,CACXC,QAAS,eACTC,MAAO,GACPC,OAAQ,GACRC,MAAON,EAAgB,QAAUD,EAAW,MAAQD,EAAe,YAAc,QACjFS,SAAU,GACVC,OAAQ,YACHP,GAAOJ,IAEZY,EAAQC,IAAED,MAAM,EAAG,KACnBE,EAASD,IAAEE,OAAOH,GA8CTI,MA5Cf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,GADlC,mBACNC,EADM,KACIC,EADJ,OAEmBH,IAAMC,SAASL,IAAEQ,IAAIT,IAFxC,mBAENU,EAFM,KAEIC,EAFJ,KAGPC,EAAiBC,KAAKC,OAAOJ,EAASH,GAAU,GAHzC,EAIiBF,IAAMC,SAASN,EAAMe,OAAO,SAACC,EAAK5B,GAO9D,OANA4B,EAAIC,KAAK,CACP7B,EAAGA,EACHC,cAAc,EACdC,UAAU,IAGL0B,GACN,KAZU,mBAINE,EAJM,KAIGC,EAJH,KA4Bb,OACE,oCACE,yBAAK1B,MAAO,CAAC2B,SAAU,IAAMC,OAAQ,qBACnC,gDACA,+JACA,mIAAyGR,KAAKS,KAAKT,KAAKU,KAAKvB,EAAMwB,SAAnI,IAA6I,kDAA7I,mBACA,6EAEF,yBAAK/B,MAAO,CAACC,QAAS,OAAQ+B,SAAU,OAAQL,SAAU,IAAMC,OAAQ,WACpEH,EAAQQ,IAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,eAAQC,IAAKD,EAAIvC,EAAGyC,QAAS,WAvB1C,IAAAzC,GAuBmDuC,EAAItC,eAvBvDD,EAuB6EuC,EAAIvC,EAtB7F+B,EAAWD,EAAQQ,IAAI,SAAAC,GACrB,OAAOA,EAAIvC,IAAMA,EAAV,KACCuC,EADD,CACMrC,UAAU,IADhB,KAECqC,EAFD,CAEMtC,aAAcsC,EAAItC,cAAmBD,EAAIc,GAAUyB,EAAIvC,EAAIA,GAAOA,EAAIc,GAAUyB,EAAIvC,EAAIA,OAGnGA,EAAIc,EACNS,EAAYvB,GACJA,EAAIc,GACZM,EAAYpB,MAawFuC,EAA7E,CAAkFpC,cAAeW,IAAWyB,EAAIvC,GAAKuC,EAAIrC,eAEhJ,yBAAKG,MAAO,CAAEqC,UAAW,WAAzB,6BAA+D,0BAAMrC,MAAO,CAAEI,MAAO,OAAQkC,WAAY,SAAWnB,MC3CtGoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.8ce4f300.chunk.js","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\n\nconst Number = ({ n, isEliminated, isAGuess, isFoundAnswer, ...rest }) =>\n    <span style={{\n      display: 'inline-block',\n      width: 40,\n      height: 40,\n      color: isFoundAnswer ? 'green' : isAGuess ? 'red' : isEliminated ? 'lightgray' : 'black',\n      fontSize: 12,\n      cursor: 'pointer',\n    }} {...rest}>{n}</span>\n\nconst range = _.range(1, 301)\nconst needle = _.sample(range)\n\nfunction App() {\n  const [knownMin, setKnownMin] = React.useState(1)\n  const [knownMax, setKnownMax] = React.useState(_.max(range))\n  const nextSuggestion = Math.trunc((knownMax+knownMin)/2)\n  const [numbers, setNumbers] = React.useState(range.reduce((acc, n) => {\n    acc.push({\n      n: n,\n      isEliminated: false,\n      isAGuess: false,\n    })\n\n    return acc\n  }, []))\n\n  const guess = n => {\n    setNumbers(numbers.map(num => {\n      return num.n === n\n        ? {...num, isAGuess: true}\n        : {...num, isEliminated: num.isEliminated || (((n > needle && num.n > n) || (n < needle && num.n < n)) ? true : false)}\n    }))\n\n    if (n > needle) {\n      setKnownMax(n)\n    } else if(n < needle) {\n      setKnownMin(n)\n    }\n  }\n\n  return (\n    <>\n      <div style={{maxWidth: 1000, margin: '0 auto 30px auto' }}>\n        <h1>Guess The Number</h1>\n        <p>This game was created for educational purposes. I think for a number and expect you to find it. So make a guess and click on it.</p>\n        <p>If you don't have a better idea, I give you my word. If you listen to me, we will find the number on {Math.ceil(Math.log2(range.length))} <code>round(log2(300))</code> tries at most.</p>\n        <p>Or, maybe you should try sequential search...</p>\n      </div>\n      <div style={{display: 'flex', flexWrap: 'wrap', maxWidth: 1000, margin: '0 auto' }}>\n        { numbers.map(num => <Number key={num.n} onClick={() => {! num.isEliminated && guess(num.n)}} {...num} isFoundAnswer={needle === num.n && num.isAGuess} />)}\n      </div>\n      <div style={{ textAlign: 'center' }}>Binary search suggestion: <span style={{ color: 'blue', fontWeight: 'bold' }}>{nextSuggestion}</span></div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}