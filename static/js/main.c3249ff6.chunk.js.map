{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Number","n","isEliminated","isAGuess","isNextSuggestion","isFoundAnswer","rest","style","display","width","height","color","fontSize","cursor","textDecoration","textDecorationColor","range","_","needle","sample","console","log","App","React","useState","knownMin","setKnownMin","max","knownMax","setKnownMax","found","setFound","nextSuggestion","Math","trunc","reduce","acc","push","numbers","setNumbers","maxWidth","margin","ceil","log2","length","flexWrap","map","num","key","onClick","textAlign","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0wBAGA,IAAMA,EAAS,SAAC,GAAD,IAAEC,EAAF,EAAEA,EAAGC,EAAL,EAAKA,aAAcC,EAAnB,EAAmBA,SAAUC,EAA7B,EAA6BA,iBAAkBC,EAA/C,EAA+CA,cAAkBC,EAAjE,yFACX,wCAAMC,MAAO,CACTC,QAAS,eACTC,MAAO,GACPC,OAAQ,GACRC,MAAON,EAAgB,QAAUF,EAAW,MAAQD,EAAe,YAAc,QACjFU,SAAU,GACVC,OAAQX,GAAgBC,GAAYE,EAAgB,UAAY,UAChES,eAAgBV,EAAmB,YAAc,UACjDW,oBAAqB,SAClBT,GAAOL,IAEZe,EAAQC,IAAED,MAAM,EAAG,KACnBE,EAASD,IAAEE,OAAOH,GACxBI,QAAQC,IAAIH,GAmEGI,MAjEf,WAAgB,IAAD,EACqBC,IAAMC,SAAS,GADpC,mBACJC,EADI,KACMC,EADN,OAEqBH,IAAMC,SAASP,IAAEU,IAAIX,IAF1C,mBAEJY,EAFI,KAEMC,EAFN,OAGeN,IAAMC,UAAS,GAH9B,mBAGJM,EAHI,KAGGC,EAHH,KAILC,EAAiBC,KAAKC,OAAON,EAAWH,GAAY,GAJ/C,EAKmBF,IAAMC,SAASR,EAAMmB,OAAO,SAACC,EAAKnC,GAO5D,OANAmC,EAAIC,KAAK,CACLpC,EAAGA,EACHC,cAAc,EACdC,UAAU,IAGPiC,GACR,KAbQ,mBAKJE,EALI,KAKKC,EALL,KAoCX,OACI,oCACI,yBAAKhC,MAAO,CAACiC,SAAU,IAAMC,OAAQ,qBACjC,gDACA,+JAEA,mIACQR,KAAKS,KAAKT,KAAKU,KAAK3B,EAAM4B,SADlC,IAC4C,kDAD5C,mBAEA,6EAEJ,yBAAKrC,MAAO,CAACC,QAAS,OAAQqC,SAAU,OAAQL,SAAU,IAAMC,OAAQ,WACnEH,EAAQQ,IAAI,SAAAC,GAAG,OACZ,kBAAC,EAAD,eACIC,IAAKD,EAAI9C,EACTgD,QAAS,WAnCf,IAAAhD,GAoCW6B,IAAUiB,EAAI7C,eAAiB6C,EAAI5C,WApC9CF,EAoCgE8C,EAAI9C,EAnC9EsC,EAAWD,EAAQQ,IAAI,SAAAC,GACnB,OAAOA,EAAI9C,IAAMA,EAAV,KACG8C,EADH,CACQ5C,UAAU,IADlB,KAGI4C,EAHJ,CAIC7C,aAAc6C,EAAI7C,cAAmBD,EAAIiB,GAAU6B,EAAI9C,EAAIA,GAAOA,EAAIiB,GAAU6B,EAAI9C,EAAIA,GAAOA,IAAMiB,OAI7GjB,EAAIiB,EACJW,EAAY5B,GACLA,EAAIiB,EACXQ,EAAYzB,IAEZ4B,EAAY5B,GACZyB,EAAYzB,GACZ8B,GAAS,MAqBG1B,cAAea,IAAW6B,EAAI9C,GAAK8C,EAAI5C,SACvCC,iBAAkB2C,EAAI9C,IAAM+B,GACxBe,OAIhB,yBAAKxC,MAAO,CAAC2C,UAAW,WAAxB,6BAA6D,0BACzD3C,MAAO,CAACI,MAAO,OAAQwC,WAAY,SAAUnB,MCnEzCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.c3249ff6.chunk.js","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\n\nconst Number = ({n, isEliminated, isAGuess, isNextSuggestion, isFoundAnswer, ...rest}) =>\n    <span style={{\n        display: 'inline-block',\n        width: 40,\n        height: 40,\n        color: isFoundAnswer ? 'green' : isAGuess ? 'red' : isEliminated ? 'lightgray' : 'black',\n        fontSize: 12,\n        cursor: isEliminated || isAGuess || isFoundAnswer ? 'default' : 'pointer',\n        textDecoration: isNextSuggestion ? 'underline' : 'initial',\n        textDecorationColor: 'blue',\n    }} {...rest}>{n}</span>\n\nconst range = _.range(1, 301)\nconst needle = _.sample(range)\nconsole.log(needle)\n\nfunction App() {\n    const [knownMin, setKnownMin] = React.useState(1)\n    const [knownMax, setKnownMax] = React.useState(_.max(range))\n    const [found, setFound] = React.useState(false)\n    const nextSuggestion = Math.trunc((knownMax + knownMin) / 2)\n    const [numbers, setNumbers] = React.useState(range.reduce((acc, n) => {\n        acc.push({\n            n: n,\n            isEliminated: false,\n            isAGuess: false,\n        })\n\n        return acc\n    }, []))\n\n    const guess = n => {\n        setNumbers(numbers.map(num => {\n            return num.n === n\n                ? {...num, isAGuess: true}\n                : {\n                    ...num,\n                    isEliminated: num.isEliminated || (((n > needle && num.n > n) || (n < needle && num.n < n) || (n === needle)) ? true : false)\n                }\n        }))\n\n        if (n > needle) {\n            setKnownMax(n)\n        } else if (n < needle) {\n            setKnownMin(n)\n        } else {\n            setKnownMax(n)\n            setKnownMin(n)\n            setFound(true)\n        }\n    }\n\n    return (\n        <>\n            <div style={{maxWidth: 1000, margin: '0 auto 30px auto', }}>\n                <h1>Guess The Number</h1>\n                <p>This game was created for educational purposes. I think for a number and expect you to find it. So\n                    make a guess and click on it.</p>\n                <p>If you don't have a better idea, I give you my word. If you listen to me, we will find the number\n                    on {Math.ceil(Math.log2(range.length))} <code>round(log2(300))</code> tries at most.</p>\n                <p>Or, maybe you should try sequential search...</p>\n            </div>\n            <div style={{display: 'flex', flexWrap: 'wrap', maxWidth: 1000, margin: '0 auto'}}>\n                {numbers.map(num => (\n                    <Number\n                        key={num.n}\n                        onClick={() => {\n                            !found && !num.isEliminated && !num.isAGuess && guess(num.n)\n                        }}\n                        isFoundAnswer={needle === num.n && num.isAGuess}\n                        isNextSuggestion={num.n === nextSuggestion}\n                        {...num}\n                    />\n                ))}\n            </div>\n            <div style={{textAlign: 'center'}}>Binary search suggestion: <span\n                style={{color: 'blue', fontWeight: 'bold'}}>{nextSuggestion}</span></div>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}